package route

import (
	"fmt"
	"github.com/gin-gonic/gin"
	"os"
)

func exploit(c *gin.Context) {
	client_uuid := c.PostForm("uuid")
	platform := c.PostForm("platform")

	var exploit_uuid, filename, environment, command, argv string
	var times int
	err := conf.Db.QueryRow("SELECT uuid, filename, environment, command, argv, times FROM `0e7_exploit` WHERE (filter='' OR filter like ?) AND (platform='' OR platform like ?) AND (times<=-2 OR times >=1)", "%"+client_uuid+"%", "%"+platform+"%").Scan(&exploit_uuid, &filename, &environment, &command, &argv, &times)
	if err != nil {
		fmt.Println("Failed to query database:", err)
		c.JSON(400, gin.H{
			"message": err,
		})
		return
	}
	if exploit_uuid == "" {

		c.JSON(204, gin.H{
			"message": "No task",
		})
	} else {
		if times >= 0 {
			times -= 1
			_, err = conf.Db.Exec("UPDATE `0e7_exploit` SET times=? WHERE uuid=?", times, exploit_uuid)
			if err != nil {
				c.JSON(400, gin.H{
					"message": err,
				})
				c.Abort()
			}
		}

		c.JSON(200, gin.H{
			"exploit_uuid": exploit_uuid,
			"filename":     filename,
			"environment":  environment,
			"command":      command,
			"argv":         argv,
		})
	}
}
func exploit_download(c *gin.Context) {
	exploit_uuid := c.PostForm("exploit_uuid")
	filename := c.PostForm("filename")
	filePath := "exploit/" + exploit_uuid + "/" + filename
	_, err := os.Stat(filePath)
	if err != nil {
		c.JSON(400, gin.H{
			"message": "File not exist",
		})
		c.Abort()
	}
	c.Header("Content-Disposition", "attachment; filename="+filename)
	c.Header("Content-Type", "application/octet-stream")
	c.File(filePath)
}
