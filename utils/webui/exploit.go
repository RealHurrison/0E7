package webui

import (
	"0E7/utils/client"
	"0E7/utils/config"
	"database/sql"
	"errors"
	"io"
	"log"
	"math"
	"os"
	"path/filepath"
	"strconv"
	"strings"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
)

func exploit(c *gin.Context) {
	exploit_uuid := c.PostForm("exploit_uuid")
	environment := c.PostForm("environment")
	command := c.PostForm("command")
	argv := c.PostForm("argv")
	fileName := c.PostForm("filename")
	platform := c.PostForm("platform")
	arch := c.PostForm("arch")
	timeout := c.PostForm("timeout")
	times := c.PostForm("times")
	filter := c.PostForm("filter")
	file, errF := c.FormFile("file")
	code := c.PostForm("code")

	if exploit_uuid == "" {
		exploit_uuid = uuid.New().String()
	}

	if errF == nil || command != "" || code != "" {
		if errF == nil {
			fileName = file.Filename
		} else if code != "" {
			fileName = code
		}

		if times == "" {
			times = "-2"
		}
		if timeout == "" {
			timeout = "15"
		}

		var count int
		err := config.Db.QueryRow("SELECT COUNT(*) FROM `0e7_exploit` WHERE uuid=?", exploit_uuid).Scan(&count)
		if err != nil {
			c.JSON(400, gin.H{
				"message":      "fail",
				"error":        err.Error(),
				"exploit_uuid": "",
			})
			c.Abort()
			return
		}
		if count == 0 {
			_, err = config.Db.Exec("INSERT INTO `0e7_exploit` (uuid,filename,environment,command,argv,platform,arch,filter,timeout,times) VALUES (?,?,?,?,?,?,?,?,?,?)", exploit_uuid, fileName, environment, command, argv, platform, arch, filter, timeout, times)
		} else {
			_, err = config.Db.Exec("UPDATE `0e7_exploit` SET environment=?,command=?,argv=?,times=?,timeout=?,filter=?,platform=?,arch=?,filename=? WHERE uuid=?", environment, command, argv, times, timeout, platform, arch, filter, fileName, exploit_uuid)
		}
		if err != nil {
			c.JSON(400, gin.H{
				"message":      "fail",
				"error":        err.Error(),
				"exploit_uuid": "",
			})
			c.Abort()
			return
		}
		if errF == nil {
			//fileName := exploit_uuid + filepath.Ext(file.Filename)
			savePath := "exploit/" + exploit_uuid + "/"
			if err = os.MkdirAll(savePath, os.ModePerm); err != nil {
				c.JSON(500, gin.H{
					"message":      "fail",
					"error":        err.Error(),
					"exploit_uuid": "",
				})
				return
			}
			saveFilePath := filepath.Join(savePath, fileName)
			if err := c.SaveUploadedFile(file, saveFilePath); err != nil {
				c.JSON(500, gin.H{
					"message":      "fail",
					"error":        err.Error(),
					"exploit_uuid": "",
				})
				return
			}
			if strings.HasSuffix(fileName, ".zip") {
				if err = client.Unzip(fileName, exploit_uuid); err != nil {
					c.JSON(500, gin.H{
						"message":      "fail",
						"error":        err.Error(),
						"exploit_uuid": "",
					})
					return
				}
			} else if strings.HasSuffix(fileName, ".tar") {
				if err = client.Untar(fileName, exploit_uuid); err != nil {
					c.JSON(500, gin.H{
						"message":      "fail",
						"error":        err.Error(),
						"exploit_uuid": "",
					})
					return
				}
			}
		}
		c.JSON(200, gin.H{
			"message":      "success",
			"error":        "",
			"exploit_uuid": exploit_uuid,
		})
	}
}

func exploit_rename(c *gin.Context) {
	var err error
	old := c.PostForm("old")
	new := c.PostForm("new")

	if new == "" {
		new = uuid.New().String()
	}
	_, err = config.Db.Exec("UPDATE `0e7_exploit` SET uuid=? WHERE uuid=?", new, old)
	if err != nil {
		c.JSON(400, gin.H{
			"message":    "fail",
			"error":      err.Error(),
			"exploit_id": "",
		})
		c.Abort()
		return
	}

	err = os.Rename("exploit/"+old, "exploit/"+new)
	if err != nil {
		err = CopyDir("exploit/"+old, "exploit/"+new)
		if err != nil {
			c.JSON(400, gin.H{
				"message":    "fail",
				"error":      err.Error(),
				"exploit_id": "",
			})
		} else {
			c.JSON(202, gin.H{
				"message":    "copy",
				"error":      "The folder is being occupied, operation copy instead, please manually delete the original folder",
				"exploit_id": new,
			})
		}
		return
	}
	c.JSON(200, gin.H{
		"message":    "success",
		"error":      "",
		"exploit_id": new,
	})
}

func CopyDir(srcPath string, destPath string) error {
	if srcInfo, err := os.Stat(srcPath); err != nil {
		log.Println(err.Error())
		return err
	} else {
		if !srcInfo.IsDir() {
			e := errors.New("srcPath Error")
			log.Println(e.Error())
			return e
		}
	}
	if destInfo, err := os.Stat(destPath); err != nil {
		if err = os.MkdirAll(destPath, os.ModePerm); err != nil {
			log.Println(err.Error())
			return err
		}
	} else {
		if !destInfo.IsDir() {
			e := errors.New("DestPath Error")
			log.Println(e.Error())
			return e
		}
	}
	err := filepath.Walk(srcPath, func(path string, f os.FileInfo, err error) error {
		if f == nil {
			return err
		}
		if !f.IsDir() {
			path := strings.Replace(path, "\\", "/", -1)
			destNewPath := strings.Replace(path, srcPath, destPath, -1)
			log.Println("Cope" + path + " to " + destNewPath)
			copyFile(path, destNewPath)
		}
		return nil
	})
	if err != nil {
		log.Printf(err.Error())
	}
	return err
}

func copyFile(src, dest string) (w int64, err error) {
	srcFile, err := os.Open(src)
	if err != nil {
		log.Println(err.Error())
		return
	}
	defer srcFile.Close()
	destSplitPathDirs := strings.Split(dest, "/")
	destSplitPath := ""
	for index, dir := range destSplitPathDirs {
		if index < len(destSplitPathDirs)-1 {
			destSplitPath = destSplitPath + dir + "/"
			b, _ := pathExists(destSplitPath)
			if b == false {
				log.Println("创建目录:" + destSplitPath)
				err := os.Mkdir(destSplitPath, os.ModePerm)
				if err != nil {
					log.Println(err)
				}
			}
		}
	}
	dstFile, err := os.Create(dest)
	if err != nil {
		log.Println(err.Error())
		return
	}
	defer dstFile.Close()

	return io.Copy(dstFile, srcFile)
}

func pathExists(path string) (bool, error) {
	_, err := os.Stat(path)
	if err == nil {
		return true, nil
	}
	if os.IsNotExist(err) {
		return false, nil
	}
	return false, err
}

func exploit_get_by_uuid(c *gin.Context) {
	exploit_uuid := c.PostForm("uuid")
	if exploit_uuid == "" {
		c.JSON(400, gin.H{"message": "fail", "error": "uuid is required"})
		return
	}

	var id int
	var uuid, filename, environment, command, argv, platform, arch, filter, timeout, times string
	err := config.Db.QueryRow("SELECT id,uuid,filename,environment,command,argv,platform,arch,filter,timeout,times FROM `0e7_exploit` WHERE uuid=? LIMIT 1", exploit_uuid).Scan(&id, &uuid, &filename, &environment, &command, &argv, &platform, &arch, &filter, &timeout, &times)
	if err != nil {
		if err == sql.ErrNoRows {
			c.JSON(404, gin.H{"message": "fail", "error": "exploit not found"})
		} else {
			c.JSON(500, gin.H{"message": "fail", "error": err.Error()})
		}
		return
	}

	var code string
	if strings.HasPrefix(filename, "data:code/") {
		code = filename
		filename = ""
	} else if filename != "" {
		filePath := filepath.Join("exploit", uuid, filename)
		if _, err := os.Stat(filePath); err == nil {
			content, err := os.ReadFile(filePath)
			if err == nil {
				code = string(content)
			}
		}
	}

	times_int, _ := strconv.Atoi(times)

	element := map[string]interface{}{
		"id":           id,
		"exploit_uuid": uuid,
		"filename":     filename,
		"environment":  environment,
		"command":      command,
		"argv":         argv,
		"platform":     platform,
		"arch":         arch,
		"filter":       filter,
		"timeout":      timeout,
		"times":        times_int,
		"code":         code,
	}

	c.JSON(200, gin.H{
		"message": "success",
		"error":   "",
		"result":  element,
	})
}

func exploit_show_output(c *gin.Context) {
	var err error
	query_id := c.PostForm("id")
	page_size := c.PostForm("page_size")
	page_num := c.PostForm("page")
	var filter_argv []interface{}
	var filter_sql string

	exploit_uuid := c.PostForm("exploit_uuid")
	if exploit_uuid != "" {
		filter_sql = filter_sql + " AND uuid LIKE ?"
		filter_argv = append(filter_argv, "%"+exploit_uuid+"%")
	}
	client_uuid := c.PostForm("client_uuid")
	if client_uuid != "" {
		filter_sql = filter_sql + " AND client LIKE ?"
		filter_argv = append(filter_argv, "%"+client_uuid+"%")
	}
	platform := c.PostForm("platform")
	if platform != "" {
		filter_sql = filter_sql + " AND platform LIKE ?"
		filter_argv = append(filter_argv, "%"+platform+"%")
	}
	arch := c.PostForm("arch")
	if arch != "" {
		filter_sql = filter_sql + " AND arch LIKE ?"
		filter_argv = append(filter_argv, "%"+arch+"%")
	}

	if query_id == "" {
		offset := 1
		if page_num != "" {
			offset, err = strconv.Atoi(page_num)
			if err != nil {
				c.JSON(400, gin.H{
					"message": "fail",
					"error":   err.Error(),
					"total":   0,
					"result":  []interface{}{},
				})
				return
			}
			if offset <= 0 {
				offset = 1
			}
		}
		multi := 20
		if page_size != "" {
			multi, err = strconv.Atoi(page_size)
			if err != nil {
				c.JSON(400, gin.H{
					"message": "fail",
					"error":   err.Error(),
					"total":   0,
					"result":  []interface{}{},
				})
				return
			}
			if multi <= 0 {
				multi = 1
			}
		}
		var count int
		err := config.Db.QueryRow("SELECT COUNT(*) FROM `0e7_exploit_output` WHERE 1"+filter_sql, filter_argv...).Scan(&count)
		if err != nil {
			c.JSON(400, gin.H{
				"message": "fail",
				"error":   err.Error(),
				"total":   0,
				"result":  []interface{}{},
			})
			return
		}
		page_count := 1
		if count >= 0 {
			page_count = int(math.Ceil(float64(count) / float64(multi)))
		}
		if page_count < offset {
			if err != nil {
				c.JSON(400, gin.H{
					"message": "fail",
					"error":   "Page Error",
					"total":   count,
					"result":  []interface{}{},
				})
				return
			}
		}
		var rows *sql.Rows
		if count <= 10 {
			rows, err = config.Db.Query("SELECT id,uuid,client,substr(output,-10240),status,updated FROM `0e7_exploit_output` WHERE 1"+filter_sql+" ORDER BY id DESC LIMIT ? OFFSET ?", append(filter_argv, multi, (offset-1)*multi)...)
		} else {
			rows, err = config.Db.Query("SELECT id,uuid,client,substr(output,-1024),status,updated FROM `0e7_exploit_output` WHERE 1"+filter_sql+" ORDER BY id DESC LIMIT ? OFFSET ?", append(filter_argv, multi, (offset-1)*multi)...)
		}

		if err != nil {
			c.JSON(400, gin.H{
				"message": "fail",
				"error":   err.Error(),
				"total":   count,
				"result":  []interface{}{},
			})
			return
		}
		defer rows.Close()

		var ret []map[string]interface{}
		for rows.Next() {
			var id int
			var uuid, client, output, status, update_time string
			err := rows.Scan(&id, &uuid, &client, &output, &status, &update_time)
			if err != nil {
				c.JSON(400, gin.H{
					"message": "fail",
					"error":   err.Error(),
					"total":   count,
					"result":  []interface{}{},
				})
				return
			}
			element := map[string]interface{}{
				"id":           id,
				"exploit_uuid": uuid,
				"client_uuid":  client,
				"output":       output,
				"status":       status,
				"update_time":  update_time,
			}
			ret = append(ret, element)
		}

		c.JSON(200, gin.H{
			"message": "success",
			"error":   "",
			"total":   count,
			"result":  ret,
		})
	} else {
		var id int
		var uuid, client, output, status, update_time string
		err := config.Db.QueryRow("SELECT id,uuid,client,output,status,updated FROM `0e7_exploit_output` WHERE id=? LIMIT 1", query_id).Scan(&id, &uuid, &client, &output, &status, &update_time)
		if err != nil {
			c.JSON(400, gin.H{
				"message": "fail",
				"error":   err.Error(),
				"total":   1,
				"result":  []interface{}{},
			})
			return
		}

		var ret []map[string]interface{}
		element := map[string]interface{}{
			"id":           id,
			"exploit_uuid": uuid,
			"client_uuid":  client,
			"output":       output,
			"status":       status,
			"update_time":  update_time,
		}
		ret = append(ret, element)
		c.JSON(200, gin.H{
			"message": "success",
			"error":   "",
			"total":   1,
			"result":  ret,
		})
	}
}
