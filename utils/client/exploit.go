package client

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"os"
	"runtime"
)

func exploit() {
	values := url.Values{}
	values.Set("uuid", conf.Client_uuid)
	values.Set("platform", runtime.GOOS)
	requestBody := bytes.NewBufferString(values.Encode())
	request, err := http.NewRequest("POST", conf.Server_url+"/api/exploit", requestBody)
	if err != nil {
		fmt.Println(err)
	}
	request.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	client := &http.Client{}
	response, err := client.Do(request)
	if err != nil {
		fmt.Println(err)
	}
	if response.StatusCode == 200 {
		var result map[string]interface{}
		err = json.NewDecoder(response.Body).Decode(&result)
		if err != nil {
			fmt.Println(err)
		}
		downloadFile(result["exploit_uuid"].(string), result["filename"].(string))
	}
}
func downloadFile(exploit_uuid string, filename string) error {
	values := url.Values{}
	values.Set("exploit_uuid", exploit_uuid)
	values.Set("filename", filename)
	filepath := "exploit/" + exploit_uuid
	_, err := os.Stat(filepath)
	if err == nil {
		return nil
	}
	requestBody := bytes.NewBufferString(values.Encode())
	request, err := http.NewRequest("POST", conf.Server_url+"/api/exploit_download", requestBody)
	if err != nil {
		return err
	}
	request.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	client := &http.Client{}
	response, err := client.Do(request)
	if err != nil {
		return err
	}
	defer response.Body.Close()
	err = os.MkdirAll(filepath, os.ModePerm)
	if err != nil {
		return err
	}
	out, err := os.Create(filepath + "/" + filename)
	if err != nil {
		return err
	}
	defer out.Close()
	_, err = io.Copy(out, response.Body)
	if err != nil {
		return err
	}
	return nil
}
